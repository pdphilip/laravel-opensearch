<?php

declare(strict_types=1);

namespace PDPhilip\OpenSearch\Schema\Definitions;

/**
 * @method $this type(string|array $value)
 * @method $this preserveOriginal(bool $value)
 * @method $this ignoredScripts(array $value)
 * @method $this outputUnigrams(bool $value)
 * @method $this commonWords(array $value)
 * @method $this commonWordsPath(string $value)
 * @method $this ignoreCase(bool $value)
 * @method $this queryMode(bool $value)
 * @method $this filter(array $value)
 * @method $this script(mixed $value)
 * @method $this delimiter(string $value)
 * @method $this encoding(string $value)
 * @method $this wordList(array $value)
 * @method $this wordListPath(string $value)
 * @method $this maxSubwordSize(int $value)
 * @method $this minSubwordSize(int $value)
 * @method $this minWordSize(int $value)
 * @method $this onlyLongestMatch(bool $value)
 * @method $this maxGram(int $value)
 * @method $this minGram(int $value)
 * @method $this articles(array $value)
 * @method $this articlesPath(string $value)
 * @method $this articlesCase(bool $value)
 * @method $this maxOutputSize(int $value)
 * @method $this separator(string $value)
 * @method $this dictionary(array $value)
 * @method $this dedup(bool $value)
 * @method $this lang(string $value)
 * @method $this language(string $value)
 * @method $this locale(string $value)
 * @method $this longestOnly(bool $value)
 * @method $this noSubMatches(bool $value)
 * @method $this noOverlappingMatches(bool $value)
 * @method $this types(array $value)
 * @method $this mode(string $value)
 * @method $this keepWords(array $value)
 * @method $this keepWordsPath(string $value)
 * @method $this keepWordsCase(bool $value)
 * @method $this keywords(array $value)
 * @method $this keywordsPath(string $value)
 * @method $this keywordsPattern(string $value)
 * @method $this min(int $value)
 * @method $this max(int $value)
 * @method $this maxTokenCount(int $value)
 * @method $this consumeAllTokens(bool $value)
 * @method $this bucketCount(int $value)
 * @method $this hashCount(int $value)
 * @method $this hashSetSize(int $value)
 * @method $this withRotation(bool $value)
 * @method $this all(bool $value)
 * @method $this pattern(string $value)
 * @method $this replacement(string $value)
 * @method $this maxShingleSize(int $value)
 * @method $this minShingleSize(int $value)
 * @method $this outputUnigramsIfNoShingles(bool $value)
 * @method $this tokenSeparator(string $value)
 * @method $this fillerToken(string $value)
 * @method $this name(string $value)
 * @method $this stopwords(string|array $value)
 * @method $this stopwordsPath(string $value)
 * @method $this removeTrailing(bool $value)
 * @method $this length(int $value)
 * @method $this onlyOnSamePosition(bool $value)
 * @method $this catenateAll(bool $value)
 * @method $this catenateNumbers(bool $value)
 * @method $this catenateWords(bool $value)
 * @method $this generateNumberParts(bool $value)
 * @method $this generateWordParts(bool $value)
 * @method $this protectedWords(array $value)
 * @method $this protectedWordsPath(string $value)
 * @method $this splitOnCaseChange(bool $value)
 * @method $this splitOnNumerics(bool $value)
 * @method $this stemEnglishPossessive(bool $value)
 * @method $this typeTable(array $value)
 * @method $this typeTablePath(string $value)
 * @method $this adjustOffsets(bool $value)
 * @method $this ignoreKeywords(bool $value)
 */
class FilterPropertyDefinition extends FluentDefinitions {}
